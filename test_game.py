import pytest
from Tic_Tac_Toe import TicTacToe
from unittest import mock

# üìå –§—ñ–∫—Å—Ç—É—Ä–∞: —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º
@pytest.fixture
def game():
    return TicTacToe(size=3)

#  –¢–µ—Å—Ç 1: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –ø–æ–ª—è
def test_initial_state(game):
    assert all(cell == ' ' for row in game.board for cell in row)
    assert game.current_player == 'X'

#  –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–Ω–∏–π —Ö—ñ–¥ –∑–º—ñ–Ω—é—î —Å—Ç–∞–Ω
def test_valid_move(game):
    assert game.make_move(1, 1) is False
    assert game.board[0][0] == 'X'
    assert game.current_player == 'O'

#  –¢–µ—Å—Ç 3: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ö—ñ–¥ ‚Äî –º–æ–∫ –¥–ª—è capsys
def test_invalid_move(game, capsys):
    game.make_move(1, 1)
    game.make_move(1, 1)  # –ü–æ–≤—Ç–æ—Ä–Ω–∏–π —Ö—ñ–¥ —É —Ç—É —Å–∞–º—É –∫–ª—ñ—Ç–∏–Ω–∫—É
    captured = capsys.readouterr()
    assert "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ö—ñ–¥" in captured.out

#  –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü—ñ—è: –ø–µ—Ä–µ–º–æ–≥–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ, –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ, –¥—ñ–∞–≥–æ–Ω–∞–ª—è–º
@pytest.mark.parametrize("board, move, player", [
    ([['X', 'X', ' '], [' ', ' ', ' '], [' ', ' ', ' ']], (1, 3), 'X'),   # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
    ([['X', ' ', ' '], ['X', ' ', ' '], [' ', ' ', ' ']], (3, 1), 'X'),   # –≤–µ—Ä—Ç–∏–∫–∞–ª—å
    ([['X', ' ', ' '], [' ', 'X', ' '], [' ', ' ', ' ']], (3, 3), 'X'),   # –≥–æ–ª–æ–≤–Ω–∞ –¥—ñ–∞–≥–æ–Ω–∞–ª—å
    ([[' ', ' ', 'X'], [' ', 'X', ' '], [' ', ' ', ' ']], (3, 1), 'X')    # –ø–æ–±—ñ—á–Ω–∞ –¥—ñ–∞–≥–æ–Ω–∞–ª—å
])
def test_winning_combinations(board, move, player):
    game = TicTacToe(size=3)
    game.board = board
    game.current_player = player
    assert game.make_move(*move) is True

#  –ú–æ–∫—É–≤–∞–Ω–Ω—è: –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —â–æ print_board –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–≥—Ä–∞—à—É
def test_print_called_on_win():
    game = TicTacToe(size=3)
    game.board = [['X', 'X', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]
    game.current_player = 'X'
    with mock.patch('builtins.print') as mocked_print:
        game.make_move(1, 3)
        mocked_print.assert_any_call('–ì—Ä–∞–≤–µ—Ü—å X –≤–∏–≥—Ä–∞–≤!')

#  –ú–∞—Ä–∫–µ—Ä: –ø–æ–º—ñ—Ç–∏–º–æ —è–∫ "critical"
@pytest.mark.critical
def test_switching_players(game):
    game.make_move(1, 1)
    assert game.current_player == 'O'
